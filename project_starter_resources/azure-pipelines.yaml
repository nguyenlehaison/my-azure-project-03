trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '14fe3361-dbb1-459b-b7ba-234b932a0fb8'

  # Web app name
  webAppName: 'hsonnlAppService'

  poolName: 'hsonnlPool'
  # Agent VM image name
  vmImageName: 'hsonnlVM'

  # Environment name
  environmentName: 'hsonnlEnv'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

name: Azure Pipelines
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          pwd
          git remote -v
          git fetch
          git pull origin master
          ls
        workingDirectory: $(projectRoot)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          terraform --version
          terraform init
          terraform plan
          terraform apply -auto-approve
        workingDirectory: ./terraform
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    # - task: Bash@3
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       terraform destroy
    #     workingDirectory: $(projectRoot)/project_starter_resources/terraform/
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './/automatedtesting'
        artifact: 'automatedtesting'
        publishLocation: 'pipeline'
        workingDirectory: $(projectRoot)

  - job: Postman
    pool:
      name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json  --reporters cli,junit --reporter-junit-export junit-report.xml'

        workingDirectory: './automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results for postman'
      inputs:
       testResultsFormat: 'JUnit'
       testResultsFiles: '**/*.xml'
       mergeTestResults: true
       failTaskOnFailedTests: false
# - stage: JMeterTests
#   jobs:
#   - job: JMETERTests
#     pool:
#       name: 'hsonnlAgentVMScaleSet'
#     environment:
#       name:  'hsonnlEnvScaleSet'
#       resourceName: 'hsonnlLinuxVMScaleSet'
#     steps:
#     - bash: |
#         sudo apt-get install openjdk-11-jre-headless -y
#         java -version
#         wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
#         tar xzvf jmeter.tgz
#         apache-jmeter-5.4/bin/jmeter --version
#         # create log directory
#         mkdir -p log/jmeter
#         pwd
#         ls -la
#       displayName: Install JMeter
#     - bash: |
#         apache-jmeter-5.4/bin/jmeter -n -t jmeter/StressTestSuitev2.jmx \
#                                       -l log/jmeter/stress-test-result.csv \
#                                       -e -f -o log/jmeter/stress-test-html-report \
#                                       -j log/jmeter/jmeter-stress-test.log
#       displayName: JMeter stress test
#     - bash: |
#         apache-jmeter-5.4/bin/jmeter -n -t jmeter/EnduranceTestSuitev2.jmx \
#                                       -l log/jmeter/endurance-test-result.csv \
#                                       -e -f -o log/jmeter/endurance-test-html-report \
#                                       -j log/jmeter/jmeter-endurance-test.log
#       displayName: JMeter endurance test
#     - task: ArchiveFiles@2
#       displayName: Archive JMeter stress test HTML report
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
#         verbose: true
#     - task: ArchiveFiles@2
#       displayName: Archive JMeter endurance test HTML report
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
#         verbose: true
#     - bash: |
#         rm -rf log/jmeter/stress-test-html-report
#         rm -rf log/jmeter/endurance-test-html-report
#         cd log/jmeter
#         pwd
#         ls -la
#       displayName: Delete original JMeter test HTML reports
#     - task: PublishPipelineArtifact@1
#       displayName: Publish JMeter logs
#       inputs:
#         targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
#         artifactName: 'drop-jmeter-logs'
- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: 'hsonnlAgentVMScaleSet'
    environment:
      name:  'hsonnlEnvScaleSet'
      resourceName: 'hsonnlLinuxVMScaleSet'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appType: 'webApp'
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # install ZIP
                sudo apt-get update -y
                sudo apt-get -y install zip
                sudo apt-get -y install python3-pip
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # install JAVA, APACHE2
                sudo apt-get update -y
                sudo apt-get install openjdk-8-jdk -y
                sudo apt-get install apache2 -y
                sudo systemctl start apache2
                sudo systemctl enable apache2
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: '5.4.2'
          - task: TaurusInstaller@0
            inputs:
              taurusVersion: '1.15.3'
              pythonCommand: 'python3'
          - task: TaurusRunner@0
            inputs:
              taurusConfig: |
                execution:
                - scenario:
                    # You can also reference a JMeter test plan (recommended)
                    script: $(Pipeline.Workspace)/automatedtesting/jmeter/Starter.jmx
                  concurrency: 5
                  iterations: 10
                  ramp-up: 2s
                
                reporting:
                - module: junit-xml
                  filename: taurus-output/TEST-Taurus.xml
              jmeterHome: '$(JMeterInstaller.JMeterHome)'
              jmeterPath: '$(JMeterInstaller.JMeterPath)'
              jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
              outputDir: 'taurus-output'
  - deployment: VMDeploy
    displayName: web
    environment:
      name:  'hsonnlEnv'
      resourceName: 'hsonnlVM'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install chromium-chromedriver -y
                pip3 install selenium
                pip install selenium
                echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
                source ~/.bash_profile
                
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Run selenium
                
                git clone https://github.com/nguyenlehaison/my-azure-project-03.git
                cd ./my-azure-project-03/
                git pull
                cd ./automatedtesting/selenium/
                python3 login.py