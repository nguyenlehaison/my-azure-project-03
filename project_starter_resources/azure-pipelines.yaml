trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '14fe3361-dbb1-459b-b7ba-234b932a0fb8'

  # Web app name
  webAppName: 'hsonnlAppService'

  poolName: 'hsonnlPool'
  # Agent VM image name
  vmImageName: 'hsonnlVM'

  # Environment name
  environmentName: 'hsonnlEnv'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

name: Azure Pipelines
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          pwd
          ls
          git remote -v
          git fetch
          git pull origin master
          cd ./project_starter_resources
          ls
        workingDirectory: $(projectRoot)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          terraform --version
          terraform init
          terraform plan
          terraform apply -auto-approve
        workingDirectory: $(projectRoot)
    # Needed for Terraform VM deployment
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: './automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          terraform destroy
    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: './/automatedtesting'
    #     artifact: 'automatedtesting'
    #     publishLocation: 'pipeline'

  # - job: Postman
  #   pool:
  #     name: $(poolName)
  #     vmImage: $(vmImageName)
  #   steps:
  #   - task: CmdLine@2
  #     displayName: Install Newman
  #     inputs:
  #       script: 'sudo npm install -g newman'
  #       workingDirectory: $(System.DefaultWorkingDirectory)
  #   - task: CmdLine@2
  #     displayName: Run Regression Tests
  #     continueOnError: true
  #     inputs:
  #       script: 'newman run StarterAPIs.json  --reporters cli,junit --reporter-junit-export junit-report.xml'

  #       workingDirectory: './automatedtesting/postman'
  #   - task: PublishTestResults@2
  #     displayName: 'Publish Test Results for postman'
  #     inputs:
  #      testResultsFormat: 'JUnit'
  #      testResultsFiles: '**/*.xml'
  #      mergeTestResults: true
  #      failTaskOnFailedTests: false
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       name: $(poolName)
#       vmImage: $(vmImageName)
#     environment:
#       name:  'hsonnlEnv'
#       resourceType: 'hsonnlVM'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: 'Azure for Students (4c298133-8bec-4ca0-94e5-9c0ba696cc54)'
#               appType: 'webApp'
#               appName: $(webAppName)
#               package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
#               deploymentMethod: 'auto'
          # - task: JMeterInstaller@0
          #   inputs:
          #     jmeterVersion: '5.4.2'
          # - task: TaurusInstaller@0
          #   inputs:
          #     taurusVersion: '1.15.3'
          #     pythonCommand: 'python3'
          # - task: TaurusRunner@0
          #   inputs:
          #     taurusConfig: |
          #       execution:
          #       - scenario:
          #           # You can also reference a JMeter test plan (recommended)
          #           script: $(Pipeline.Workspace)/automatedtesting/jmeter/Starter.jmx
          #         concurrency: 5
          #         iterations: 10
          #         ramp-up: 2s
                
          #       reporting:
          #       - module: junit-xml
          #         filename: taurus-output/TEST-Taurus.xml
          #     jmeterHome: '$(JMeterInstaller.JMeterHome)'
          #     jmeterPath: '$(JMeterInstaller.JMeterPath)'
          #     jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
          #     outputDir: 'taurus-output'
  # - deployment: VMDeploy
  #   displayName: web
  #   environment:
  #     name:  'hsonnlEnv'
  #     resourceType: 'hsonnlVM'
  #     tags: 'web'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3 -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               sudo apt-get install chromium-chromedriver -y
  #               pip3 install selenium
  #               echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
  #               source ~/.bash_profile
                
          # - task: Bash@3
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       # Run selenium
                
          #       git clone https://github.com/ngvbach2000/Project-Starter-Resources.git
          #       cd Project-Starter-Resources
          #       git pull
          #       cd automatedtesting/selenium
          #       python3 login.py
##########################
# stages:
# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       name: $(poolName)
#       vmImage: $(vmImageName)
#     steps:
#     # Needed for Terraform VM deployment
#     # - task: InstallSSHKey@0
#     #   inputs:
#     #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
#     #     sshPublicKey: 'PUBLIC_KEY'
#     #     sshKeySecureFile: 'id_rsa'
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 'path/to/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       name: $(poolName)
#       vmImage: $(vmImageName)
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
#   # - deployment: VMDeploy
#   #   displayName: NAME
#   #   environment:
#   #     name:  ENVIRONMENT NAME
#   #     resourceType: VirtualMachine
#   #     tags: TAG NAME
#   #   strategy:
#   #     runOnce:
#   #       deploy:
#   #         steps:
#   #         - task: Bash@3
#   #           inputs:
#   #             targetType: 'inline'
#   #             script: |
#   #               #! /bin/bash
                
#   #               sudo apt-get upgrade -y
#   #               sudo apt-get install python3-pip -y
#   #               sudo apt-get install unzip -y
#   #               sudo apt-get install -y chromium-browser
#   #               pip3 install selenium
#   #               export PATH=$PATH:some/path


